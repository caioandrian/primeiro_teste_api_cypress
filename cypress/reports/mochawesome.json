{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2021-05-21T12:56:55.215Z",
    "end": "2021-05-21T12:57:00.476Z",
    "duration": 5261,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "644a216d-9e05-4761-98e1-cda35ba756c5",
      "title": "",
      "fullFile": "cypress/integration/test_api.js",
      "file": "cypress/integration/test_api.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "603495ca-9ef5-4ce8-82b2-4e81c077f85b",
          "title": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0fc5ab81-765b-460c-ac47-f856769d4153",
              "title": "Deve Criar um Novo Usuário",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Entrada Válida",
                  "fullTitle": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN Deve Criar um Novo Usuário Entrada Válida",
                  "timedOut": null,
                  "duration": 2335,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.postNewUser(\"Caio Tester\", \"Male\", \"teste_api_caio5@qualquer.com\", \"Active\").then(res => {\n  console.log(res);\n  expect(res).to.have.property('status', 200);\n  expect(res.body).to.have.property('code', 201);\n  expect(res.body.data).to.have.property('id');\n  expect(res.body.data).to.have.property('name', \"Caio Tester\"); //valida se o nome nao possui numeros\n  expect(res.body.data).to.have.property('name').to.be.deep.match(/\\D+/); //valida se o nome é uma string\n  expect(res.body.data).to.have.property('name').to.be.a('string');\n  expect(res.body.data).to.have.property('gender', \"Male\"); //valida se o genero nao possui numeros\n  expect(res.body.data).to.have.property('gender').to.be.deep.match(/\\D+/); //valida se o genero é uma string\n  expect(res.body.data).to.have.property('gender').to.be.a('string');\n  expect(res.body.data).to.have.property('status', \"Active\"); //valida se o status nao possui numeros\n  expect(res.body.data).to.have.property('status').to.be.deep.match(/\\D+/); //valida se o status é uma string\n  expect(res.body.data).to.have.property('status').to.be.a('string');\n  expect(res.body.data).to.have.property('email', \"teste_api_caio5@qualquer.com\");\n  id_new_user = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "6b4e521e-3827-42c8-8dd5-9287978b9d9f",
                  "parentUUID": "0fc5ab81-765b-460c-ac47-f856769d4153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Entrada Inválida (email duplicado)",
                  "fullTitle": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN Deve Criar um Novo Usuário Entrada Inválida (email duplicado)",
                  "timedOut": null,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.postNewUser(\"Caio Tester\", \"Male\", \"teste_api_caio5@qualquer.com\", \"Active\").then(res => {\n  console.log(res);\n  expect(res).to.have.property('status', 200);\n  expect(res.body).to.have.property('code', 422);\n  expect(res.body.data[0]).to.have.property('field', \"email\");\n  expect(res.body.data[0]).to.have.property('message', \"has already been taken\");\n});",
                  "err": {},
                  "uuid": "548774bf-0366-466d-a571-df9d56dd3d23",
                  "parentUUID": "0fc5ab81-765b-460c-ac47-f856769d4153",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b4e521e-3827-42c8-8dd5-9287978b9d9f",
                "548774bf-0366-466d-a571-df9d56dd3d23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2826,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a5bba39-240d-45af-ba2c-4d90f18040b4",
              "title": "Deve Recuperar um Usuário",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Id Válido",
                  "fullTitle": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN Deve Recuperar um Usuário Id Válido",
                  "timedOut": null,
                  "duration": 551,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.getUserById(id_new_user).then(res => {\n  console.log(res);\n  expect(res).to.have.property('status', 200);\n  expect(res.body).to.have.property('code', 200);\n  expect(res.body.data).to.have.property('id');\n  expect(res.body.data).to.have.property('name', \"Caio Tester\"); //valida se o nome nao possui numeros\n  expect(res.body.data).to.have.property('name').to.be.deep.match(/\\D+/); //valida se o nome é uma string\n  expect(res.body.data).to.have.property('name').to.be.a('string');\n  expect(res.body.data).to.have.property('gender', \"Male\"); //valida se o genero nao possui numeros\n  expect(res.body.data).to.have.property('gender').to.be.deep.match(/\\D+/); //valida se o genero é uma string\n  expect(res.body.data).to.have.property('gender').to.be.a('string');\n  expect(res.body.data).to.have.property('status', \"Active\"); //valida se o status nao possui numeros\n  expect(res.body.data).to.have.property('status').to.be.deep.match(/\\D+/); //valida se o status é uma string\n  expect(res.body.data).to.have.property('status').to.be.a('string');\n  expect(res.body.data).to.have.property('email', \"teste_api_caio5@qualquer.com\");\n});",
                  "err": {},
                  "uuid": "b455cb0f-04e2-44df-af63-727425345f0d",
                  "parentUUID": "9a5bba39-240d-45af-ba2c-4d90f18040b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Id Inválido",
                  "fullTitle": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN Deve Recuperar um Usuário Id Inválido",
                  "timedOut": null,
                  "duration": 453,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.getUserById(579900).then(res => {\n  console.log(res);\n  expect(res.body).to.have.property('code', 404);\n  expect(res.body.data).to.have.property('message', \"Resource not found\");\n});",
                  "err": {},
                  "uuid": "e1e39c04-ec7b-458c-8d43-ff64be03c4ef",
                  "parentUUID": "9a5bba39-240d-45af-ba2c-4d90f18040b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b455cb0f-04e2-44df-af63-727425345f0d",
                "e1e39c04-ec7b-458c-8d43-ff64be03c4ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1004,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aeb75f4e-43e4-4424-b567-f69757861bdb",
              "title": "Deve Deletar um Usuário",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Usuário Existente",
                  "fullTitle": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN Deve Deletar um Usuário Usuário Existente",
                  "timedOut": null,
                  "duration": 886,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.deleteUser(id_new_user).then(res_delete => {\n  console.log(res_delete);\n  expect(res_delete).to.have.property('status', 200);\n  expect(res_delete.body).to.have.property('code', 204);\n});\ncy.getUserById(id_new_user).then(res => {\n  console.log(res);\n  expect(res).to.have.property('status', 200);\n  expect(res.body).to.have.property('code', 404);\n});",
                  "err": {},
                  "uuid": "d18f55b5-da15-4683-9673-3eaa9e36077e",
                  "parentUUID": "aeb75f4e-43e4-4424-b567-f69757861bdb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usuário Inexistente",
                  "fullTitle": "AUTOMAÇÃO API CYPRESS - GOREST.CO.IN Deve Deletar um Usuário Usuário Inexistente",
                  "timedOut": null,
                  "duration": 423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.deleteUser(65645645).then(res_delete => {\n  //console.log(res_delete)\n  expect(res_delete).to.have.property('status', 200);\n  expect(res_delete.body).to.have.property('code', 404);\n});",
                  "err": {},
                  "uuid": "0a8d1b6f-97f4-46c8-8325-3592a14e7a95",
                  "parentUUID": "aeb75f4e-43e4-4424-b567-f69757861bdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d18f55b5-da15-4683-9673-3eaa9e36077e",
                "0a8d1b6f-97f4-46c8-8325-3592a14e7a95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1309,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "quite": true,
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}